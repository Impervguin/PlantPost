package components

import (
    "PlantSite/internal/models/auth"
    "PlantSite/internal/services/search-service"
    "PlantSite/internal/view/layout"
    "PlantSite/internal/models/plant"
    "github.com/google/uuid"
	"strings"
	"slices"
    "fmt"
)

const (
    FloatMinMaxNodeType = "float-min-max"
    IntMinMaxNodeType   = "int-min-max"
    StringNodeType      = "string"
    OptionNodeType      = "option"
)

type FloatMinMaxNode struct {
    Min float64
    Max float64
}

type IntMinMaxNode struct {
    Min int
    Max int
}

type StringNode struct {
    Default string
}

type OptionNode struct {
    LabelValuePairs []struct {
        Label string
        Value string
    }
}

type PlantNode struct {
    name       string
    label      string
    nodeType   string
    floatMinMax *FloatMinMaxNode
    intMinMax   *IntMinMaxNode
    string     *StringNode
    option     *OptionNode
}

var filterNodes = []PlantNode{
    {
        name:     "name",
        label:    "Name",
        nodeType: StringNodeType,
        string: &StringNode{
            Default: "",
        },
    },
    {
        name:     "latin-name",
        label:    "Latin Name",
        nodeType: StringNodeType,
        string: &StringNode{
            Default: "",
        },
    },
    {
        name:     "height",
        label:    "Height",
        nodeType: FloatMinMaxNodeType,
        floatMinMax: &FloatMinMaxNode{
            Min: 0,
            Max: 1000, // Assuming a reasonable max height
        },
    },
    {
        name: "diameter",
        label: "Diameter",
        nodeType: FloatMinMaxNodeType,
        floatMinMax: &FloatMinMaxNode{
            Min: 0,
            Max: 1000, // Assuming a reasonable max diameter
        },
    },
    {
        name: "category",
        label: "Category",
        nodeType: OptionNodeType,
        option: &OptionNode{
            LabelValuePairs: []struct {
                Label string
                Value string
            }{
                {
                    Label: "Coniferous",
                    Value: "coniferous",
                },
                {
                    Label: "Deciduous",
                    Value: "deciduous",
                },
            },
        },
    },
    {
        name:     "soil-type",
        label:    "Soil Type",
        nodeType: OptionNodeType,
        option: &OptionNode{
            LabelValuePairs: []struct {
                Label string
                Value string
            } {
                {
                    Label: "Light",
                    Value: "light",
                },
                {
                    Label: "Medium",
                    Value: "medium",
                },
                {
                    Label: "Heavy",
                    Value: "heavy",
                },
            },
        },
    },
    {
        name:     "soil-acidity",
        label:    "Soil Acidity",
        nodeType: IntMinMaxNodeType,
        intMinMax: &IntMinMaxNode{
            Min: 0,
            Max: 100,
        },
    },
    {
        name:     "soil-moisture",
        label:    "Soil Moisture",
        nodeType: OptionNodeType,
        option: &OptionNode{
            LabelValuePairs: []struct {
                Label string
                Value string
            } {
                {
                    Label: "Dry",
                    Value: "dry",
                },
                {
                    Label: "Low",
                    Value: "low",
                },
                {
                    Label: "Medium",
                    Value: "medium",
                },
                {
                    Label: "High",
                    Value: "high",
                },
            },
        },
    },
    {
        name:     "light-relation",
        label:    "Light Relation",
        nodeType: OptionNodeType,
        option: &OptionNode{
            LabelValuePairs: []struct {
                Label string
                Value string
            }{
                {
                    Label: "Shadow",
                    Value: "shadow",
                },
                {
                    Label: "Half-Shadow",
                    Value: "halfshadow",
                },
                {
                    Label: "Light",
                    Value: "light",
                },
            },
        },
    },
    {
        name:     "winter-hardiness",
        label:    "Winter Hardiness",
        nodeType: IntMinMaxNodeType,
        intMinMax: &IntMinMaxNode{
            Min: 0,
            Max: 11,
        },
    },
    {
        name:     "flowering-period",
        label:    "Flowering Period",
        nodeType: OptionNodeType,
        option: &OptionNode{
            LabelValuePairs: []struct {
                Label string
                Value string
            } {
                {
                    Label: "Spring",
                    Value: "spring",
                },
                {
                    Label: "Summer",
                    Value: "summer",
                },
                {
                    Label: "Autumn",
                    Value: "autumn",
                },
                {
                    Label: "Winter",
                    Value: "winter",
                },
                {
                    Label: "January",
                    Value: "january",
                },
                {
                    Label: "February",
                    Value: "february",
                },
                {
                    Label: "March",
                    Value: "march",
                },
                {
                    Label: "April",
                    Value: "april",
                },
                {
                    Label: "May",
                    Value: "may",
                },
                {
                    Label: "June",
                    Value: "june",
                },
                {
                    Label: "July",
                    Value: "july",
                },
                {
                    Label: "August",
                    Value: "august",
                },
                {
                    Label: "September",
                    Value: "september",
                },
                {
                    Label: "October",
                    Value: "october",
                },
                {
                    Label: "November",
                    Value: "november",
                },
                {
                    Label: "December",
                    Value: "december",
                },
            },
        },
    },
}



templ Plants(usr auth.User, plants []*searchservice.SearchPlant) {
    @layout.Standard(usr) {
        <script src="/static/js/plants/listener.js" type="module"></script>
        <script src="/static/js/plants/buttons.js" type="module"></script>
        <div class="bg-white">
            <div>
                <main class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                    <div class="flex items-baseline justify-between border-b border-gray-200 pt-24 pb-6">
                        <h1 class="text-4xl font-bold tracking-tight text-gray-900">Plants</h1>
                    </div>
                    <section aria-labelledby="products-heading" class="pt-6 pb-24">
                        <h2 id="products-heading" class="sr-only">Products</h2>

                        <div class="grid grid-cols-1 gap-x-8 gap-y-10 lg:grid-cols-4">
                            <!-- Filters -->
                            <form class="hidden lg:block search-filters">
                                for _, filter := range filterNodes {
                                    <!-- Button to open/close filter section -->
                                    <div class="border-b border-gray-200 py-6">
                                        <h3 class="-my-3 flow-root">
                                            <button type="button" class="filter-close-open flex w-full items-center justify-between bg-white py-3 text-sm text-gray-400 hover:text-gray-500" aria-controls={"filter-section-"+filter.name} aria-expanded="false">
                                                <span class="font-medium text-gray-900">{filter.label}</span>
                                                <span class="ml-6 flex items-center">
                                                    <svg class="size-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
                                                        <path d="M10.75 4.75a.75.75 0 0 0-1.5 0v4.5h-4.5a.75.75 0 0 0 0 1.5h4.5v4.5a.75.75 0 0 0 1.5 0v-4.5h4.5a.75.75 0 0 0 0-1.5h-4.5v-4.5Z" />
                                                    </svg>
                                                    <svg class="size-5 hidden" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
                                                        <path fill-rule="evenodd" d="M4 10a.75.75 0 0 1 .75-.75h10.5a.75.75 0 0 1 0 1.5H4.75A.75.75 0 0 1 4 10Z" clip-rule="evenodd" />
                                                    </svg>
                                                </span>
                                            </button>
                                        </h3>
                                        <!-- Filter section -->
                                        <div class="pt-6 hidden" id={"filter-section-"+filter.name}>
                                            <div class="space-y-4">
                                                switch filter.nodeType {
                                                    case StringNodeType:
                                                        <div class="flex gap-3">
                                                            <input 
                                                                type="text" 
                                                                name={filter.name} 
                                                                id={filter.name}
                                                                value={filter.string.Default} 
                                                                class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                                                            />
                                                        </div>
                                                    case FloatMinMaxNodeType:
                                                        <div class="flex gap-4">
                                                            <div class="flex-1">
                                                                <label for={filter.name+"-min"} class="block text-sm font-medium text-gray-700">Min</label>
                                                                <input 
                                                                    type="number" 
                                                                    id={filter.name+"-min"} 
                                                                    name={filter.name+"-min"} 
                                                                    min={filter.floatMinMax.Min} 
                                                                    max={filter.floatMinMax.Max} 
                                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                                                />
                                                            </div>
                                                            <div class="flex-1">
                                                                <label for={filter.name+"-max"} class="block text-sm font-medium text-gray-700">Max</label>
                                                                <input 
                                                                    type="number" 
                                                                    id={filter.name+"-max"} 
                                                                    name={filter.name+"-max"} 
                                                                    min={filter.floatMinMax.Min} 
                                                                    max={filter.floatMinMax.Max} 
                                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                                                />
                                                            </div>
                                                        </div>
                                                    case IntMinMaxNodeType:
                                                        <div class="flex gap-4">
                                                            <div class="flex-1">
                                                                <label for={filter.name+"-min"} class="block text-sm font-medium text-gray-700">Min</label>
                                                                <input 
                                                                    type="number" 
                                                                    id={filter.name+"-min"} 
                                                                    name={filter.name+"-min"} 
                                                                    min={filter.intMinMax.Min} 
                                                                    max={filter.intMinMax.Max} 
                                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                                                />
                                                            </div>
                                                            <div class="flex-1">
                                                                <label for={filter.name+"-max"} class="block text-sm font-medium text-gray-700">Max</label>
                                                                <input 
                                                                    type="number" 
                                                                    step="1"
                                                                    id={filter.name+"-max"} 
                                                                    name={filter.name+"-max"} 
                                                                    min={filter.intMinMax.Min} 
                                                                    max={filter.intMinMax.Max} 
                                                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                                                />
                                                            </div>
                                                        </div>
                                                    case OptionNodeType:
                                                        for _, option := range filter.option.LabelValuePairs {
                                                            <div class="flex gap-3">
                                                                <div class="flex h-5 shrink-0 items-center">
                                                                    <div class="group grid size-4 grid-cols-1">
                                                                        <input 
                                                                            id={filter.name+"-"+strings.ToLower(option.Label)}
                                                                            name={filter.name+"[]"}
                                                                            value={option.Value} 
                                                                            type="checkbox" 
                                                                            class="col-start-1 row-start-1 appearance-none rounded-sm border border-gray-300 bg-white checked:border-amber-500 checked:bg-amber-500 indeterminate:border-amber-500 indeterminate:bg-amber-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-amber-500 disabled:border-gray-300 disabled:bg-gray-100 disabled:checked:bg-gray-100 forced-colors:appearance-auto"
                                                                        />
                                                                        <svg class="pointer-events-none col-start-1 row-start-1 size-3.5 self-center justify-self-center stroke-white group-has-disabled:stroke-gray-950/25" viewBox="0 0 14 14" fill="none">
                                                                            <path class="opacity-0 group-has-checked:opacity-100" d="M3 8L6 11L11 3.5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                                                            <path class="opacity-0 group-has-indeterminate:opacity-100" d="M3 7H11" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                                                        </svg>
                                                                    </div>
                                                                </div>
                                                                <label for={"filter-"+filter.name+"-"+option.Label} class="text-sm text-gray-600">{option.Label}</label>
                                                            </div>
                                                        }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="mt-4">
                                    <button 
                                        id="search-button" 
                                        type="button" 
                                        class="w-full rounded-md bg-amber-500 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-amber-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                                    >
                                        Search
                                    </button>
                                </div>
                                <div class="mt-4">
                                    <a 
                                        id="create-ref"
                                        href="/view/plant/create"
                                        class="w-full rounded-md bg-emerald-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-emerald-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                                    >
                                        Create
                                    </a>
                                </div>
                            </form>

                            <div class="lg:col-span-3">
                                <div class="grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-3">
                                for _, plnt := range plants {
                                    <a href={templ.SafeURL("/view/plant/" + plnt.ID.String())} class="group">
                                        <img src={plnt.MainPhoto.URL} alt="Tall slender porcelain bottle with natural clay textured body and cork stopper." class="aspect-square w-full rounded-lg bg-gray-200 object-cover group-hover:opacity-75 xl:aspect-7/8">
                                        <p class="mt-1 text-lg font-medium text-gray-900">{plnt.LatinName}</p>
                                        <h3 class="mt-4 text-sm text-gray-700">{plnt.Name}</h3>
                                        <p class="mt-1 text-sm font-medium text-gray-900">{plnt.Category}</p>

                                    </a>
                                }
                                </div>
                            </div>
                        </div>
                    </section>
                </main>
            </div>
        </div>
    }
}

var categoryFields = map[string][]string{
    "coniferous": []string{"height", "diameter", "soil-acidity", "soil-moisture", "light-relation", "soil-type", "winter-hardiness"},
    "deciduous":  []string{"height", "diameter", "soil-acidity", "soil-moisture", "light-relation", "soil-type", "winter-hardiness", "flowering-period"},
}


func CategoryNodeMap() map[string][]*PlantNode {
    m := make(map[string][]*PlantNode)
    for cat := range categoryFields {
        m[cat] = make([]*PlantNode, 0, len(categoryFields[cat]))
    }

    for i, _ := range filterNodes {
        node := &filterNodes[i]
        for cat, catFields := range categoryFields {
            if slices.Contains(catFields, node.name) {
                m[cat] = append(m[cat], node)
            }
        }
    }
    return m
}


templ PlantField(field *PlantNode, cat string, defaultValue string) {
    <div>
        <label for={field.name} class="block text-sm font-medium text-gray-700">{field.label}</label>
        switch field.nodeType {
            case StringNodeType:
                <input 
                    type="text" 
                    id={cat+"."+field.name}
                    name={field.name}
                    value={defaultValue}
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-500 focus:ring-emerald-500 sm:text-sm"
                />
            case FloatMinMaxNodeType:
                <input 
                    type="number" 
                    id={cat+"."+field.name} 
                    name={cat+"."+field.name} 
                    value={defaultValue}
                    step="0.1"
                    min={fmt.Sprintf("%f", field.floatMinMax.Min)}
                    max={fmt.Sprintf("%f", field.floatMinMax.Max)}
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-500 focus:ring-emerald-500 sm:text-sm"
                />
            case IntMinMaxNodeType:
                <input 
                    type="number" 
                    id={cat+"."+field.name} 
                    name={cat+"."+field.name} 
                    value={defaultValue}
                    min={fmt.Sprintf("%d", field.intMinMax.Min)}
                    max={fmt.Sprintf("%d", field.intMinMax.Max)}
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-500 focus:ring-emerald-500 sm:text-sm"
                />
            case OptionNodeType:
                <select 
                    id={cat+"."+field.name} 
                    name={cat+"."+field.name} 
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-500 focus:ring-emerald-500 sm:text-sm"
                >
                    for _, option := range field.option.LabelValuePairs {
                        <option value={option.Value} selected={option.Value == defaultValue}>{option.Label}</option>
                    }
                </select>
        }
    </div>
}


templ CreatePlant(usr auth.User) {
    @layout.Standard(usr) {
    <script src="/static/js/plant/category.js" type="module"></script>
    <script src="/static/js/plant/create-listener.js" type="module"></script>
    <div class="max-w-md mx-auto">
        <div class="border-b border-gray-200 pt-6 pb-6">
            <h1 class="text-2xl font-bold tracking-tight text-gray-900">Create New Plant</h1>
        </div>
        <form id="create-plant-form" class="space-y-6 pt-6" enctype="multipart/form-data">
            <!-- Basic Info -->
            <div class="space-y-4">
                <h3 class="text-lg font-medium text-gray-900">Basic Information</h3>
                
                <div>
                    <label for="name" class="block text-sm font-medium text-gray-700">Plant Name</label>
                    <input type="text" id="name" name="name" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                </div>
                
                <div>
                    <label for="latin-name" class="block text-sm font-medium text-gray-700">Latin Name</label>
                    <input type="text" id="latin-name" name="latin-name" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                </div>
                
                <div>
                    <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                    <textarea id="description" name="description" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"></textarea>
                </div>
                
                <div>
                    <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
                    <select id="category" name="category" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                        <option value="">Select a category</option>
                        <option value="coniferous">Coniferous</option>
                        <option value="deciduous">Deciduous</option>
                    </select>
                </div>
                
                <div>
                    <label for="photo" class="block text-sm font-medium text-gray-700">Main Photo</label>
                    <input type="file" id="photo" name="photo" accept="image/*" required class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100">
                </div>
            </div>
            
            for cat, fields := range CategoryNodeMap() {
                    <div id={cat+"-spec"} class="hidden space-y-4">
                        <h3 class="text-lg font-medium text-gray-900">{strings.Title(cat)} Specifications</h3>
                        for _, field := range fields {
                            @PlantField(field, cat, "")
                        }
                    </div>
                }
                       
            <div>
                <button id="create-button" type="button" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Create Plant
                </button>
            </div>
        </form>
    </div>
    }
}

type SpecificationMap map[string]any

func (m SpecificationMap) SetSpecificationValues(spec plant.PlantSpecification) {
    switch sp := spec.(type) {
        case *plant.ConiferousSpecification:
            m["height"] = sp.GetHeightM()
            m["diameter"] = sp.GetDiameterM()
            m["soil-acidity"] = sp.GetSoilAcidity()
            m["soil-moisture"] = sp.GetSoilMoisture()
            m["light-relation"] = sp.GetLightRelation()
            m["soil-type"] = sp.GetSoilType()
            m["winter-hardiness"] = sp.GetWinterHardiness()
        case *plant.DeciduousSpecification:
            m["height"] = sp.GetHeightM()
            m["diameter"] = sp.GetDiameterM()
            m["soil-acidity"] = sp.GetSoilAcidity()
            m["soil-moisture"] = sp.GetSoilMoisture()
            m["light-relation"] = sp.GetLightRelation()
            m["soil-type"] = sp.GetSoilType()
            m["winter-hardiness"] = sp.GetWinterHardiness()
            m["flowering-period"] = sp.GetFloweringPeriod()
        default:
            panic("invalid specification type")
    }
}

func (m SpecificationMap) Get(key string) any {
    if _, ok := m[key]; !ok {
        return ""
    }
    return m[key]
}

templ UpdatePlantSpecification(usr auth.User, plnt *searchservice.GetPlant) {
    @layout.Standard(usr) {
         <script src="/static/js/plant/category.js" type="module"></script>
        <script src="/static/js/plant/update-listener.js" type="module"></script>

        <div class="max-w-md mx-auto">
        <div class="border-b border-gray-200 pt-6 pb-6">
            <h1 class="text-2xl font-bold tracking-tight text-gray-900">Update {plnt.Name} Specification</h1>
        </div>
        <form id="update-plant-form" class="space-y-6 pt-6" enctype="multipart/form-data">
            <div class="border-l-4 border-emerald-600 pl-4">
                <h3 class="text-sm font-medium text-gray-900">Latin Name</h3>
                <p class="mt-2 text-sm text-gray-500">{plnt.LatinName}</p>
            </div>
            <div class="border-l-4 border-emerald-600 pl-4">
                <h3 class="text-sm font-medium text-gray-900">Description</h3>
                <p class="mt-2 text-sm text-gray-500">{plnt.Description}</p>
            </div>
            <div>
                <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
                <select id="category" name="category" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-500 focus:ring-emerald-500 sm:text-sm">
                    <option value="coniferous" selected={plnt.Category == "coniferous"}>Coniferous</option>
                    <option value="deciduous" selected={plnt.Category == "deciduous"}>Deciduous</option>
                </select>
            </div>
            
            {{ specMap := make(SpecificationMap) }}
            {{ specMap.SetSpecificationValues(plnt.Specification) }}
            for cat, fields := range CategoryNodeMap() {
                if (plnt.Category == cat) {
                    <div id={cat+"-spec"} class="space-y-4">
                        <h3 class="text-lg font-medium text-gray-900">{strings.Title(cat)} Specifications</h3>
                        for _, field := range fields {
                            @PlantField(field, cat, fmt.Sprintf("%v", specMap.Get(field.name)))
                        }
                    </div>
                } else {
                    <div id={cat+"-spec"} class="hidden space-y-4">
                        <h3 class="text-lg font-medium text-gray-900">{strings.Title(cat)} Specifications</h3>
                        for _, field := range fields {
                            @PlantField(field, cat, fmt.Sprintf("%v", specMap.Get(field.name)))
                        }
                    </div>
                }
                }
        <div>
            <button id="update-button" type="button" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-emerald-600 hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500">
                Update Plant
            </button>
        </div>
        </form>
    </div>

    }
}

templ PlantCharacteristic(title, value string) {
    <div class="border-l-4 border-emerald-600 pl-4">
        <h3 class="text-sm font-medium text-gray-900">{title}</h3>
        <p class="mt-2 text-sm text-gray-500">{value}</p>
    </div>
}


templ PlantView(usr auth.User, plnt *searchservice.GetPlant) {
    @layout.Standard(usr) {
        <script src="/static/js/plant/delete-listener.js" type="module"></script>
        <div class="bg-white">
            <div class="mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-24 lg:max-w-7xl lg:px-8">
                <!-- Plant Header -->
                <div class="lg:grid lg:grid-cols-2 lg:items-start lg:gap-x-8">
                    <!-- Image gallery -->
                    <div class="flex flex-col-reverse">
                        <div class="mx-auto mt-6 hidden w-full max-w-2xl sm:block lg:max-w-none">
                            <div class="grid grid-cols-4 gap-6">
                                if plnt.MainPhoto.ID != uuid.Nil {
                                    <div class="aspect-h-2 aspect-w-3 overflow-hidden rounded-lg">
                                        <img src={plnt.MainPhoto.URL} alt="Main plant photo" class="h-full w-full object-cover object-center">
                                    </div>
                                }
                                for _, photo := range plnt.Photos {
                                    <div class="aspect-h-2 aspect-w-3 overflow-hidden rounded-lg">
                                        <img src={photo.File.URL} alt={photo.Description} class="h-full w-full object-cover object-center">
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Main image -->
                        <div class="aspect-h-1 aspect-w-1 w-full">
                            if plnt.MainPhoto.ID != uuid.Nil {
                                <img src={plnt.MainPhoto.URL} alt="Main plant photo" class="h-full w-full object-cover object-center sm:rounded-lg">
                            } else {
                                <div class="h-full w-full bg-gray-200 flex items-center justify-center rounded-lg">
                                    <span class="text-gray-500">No image available</span>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Plant info -->
                    <div class="mt-10 px-4 sm:mt-16 sm:px-0 lg:mt-0">
                        <h1 class="text-3xl font-bold tracking-tight text-gray-900">{plnt.Name}</h1>
                        <h2 class="mt-2 text-xl italic text-gray-600">{plnt.LatinName}</h2>

                        <!-- Description -->
                        <div class="mt-6">
                            <h3 class="sr-only">Description</h3>
                            <div class="space-y-6 text-base text-gray-700">
                                <p>{plnt.Description}</p>
                            </div>
                        </div>

                        <!-- Category badge -->
                        <div class="mt-4">
                            <span class="inline-flex items-center rounded-md bg-green-50 px-2 py-1 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20">
                                {strings.Title(string(plnt.Category))}
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Specifications -->
                switch spec := plnt.Specification.(type) {
                    case *plant.ConiferousSpecification:
                        <div class="mt-16">
                    <h2 class="text-2xl font-bold tracking-tight text-gray-900">Specifications</h2>
                    <div class="mt-6 grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-3">
                        @PlantCharacteristic("Height", fmt.Sprintf("%.2f m", spec.GetHeightM()))
                        @PlantCharacteristic("Diameter", fmt.Sprintf("%.2f m", spec.GetDiameterM()))
                        @PlantCharacteristic("Soil Type", strings.Title(string(spec.GetSoilType())))
                        @PlantCharacteristic("Soil Acidity (pH)", fmt.Sprintf("%d", spec.GetSoilAcidity()))
                        @PlantCharacteristic("Soil Moisture", strings.Title(string(spec.GetSoilMoisture())))
                        @PlantCharacteristic("Light Relation", strings.Title(string(spec.GetLightRelation())))
                        @PlantCharacteristic("Winter Hardiness Zone", fmt.Sprintf("%d", spec.GetWinterHardiness()))
                    </div>
                    </div>
                    case *plant.DeciduousSpecification:
                        <div class="mt-16">
                    <h2 class="text-2xl font-bold tracking-tight text-gray-900">Specifications</h2>
                    <div class="mt-6 grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-3">
                        @PlantCharacteristic("Height", fmt.Sprintf("%.2f m", spec.GetHeightM()))
                        @PlantCharacteristic("Diameter", fmt.Sprintf("%.2f m", spec.GetDiameterM()))
                        @PlantCharacteristic("Soil Type", strings.Title(string(spec.GetSoilType())))
                        @PlantCharacteristic("Soil Acidity (pH)", fmt.Sprintf("%d", spec.GetSoilAcidity()))
                        @PlantCharacteristic("Soil Moisture", strings.Title(string(spec.GetSoilMoisture())))
                        @PlantCharacteristic("Light Relation", strings.Title(string(spec.GetLightRelation())))
                        @PlantCharacteristic("Winter Hardiness Zone", fmt.Sprintf("%d", spec.GetWinterHardiness()))
                        @PlantCharacteristic("Flowering Period", strings.Title(string(spec.GetFloweringPeriod())))
                    </div>
    
                </div>
    }
                <!-- Created At -->
                <div class="mt-8 border-t border-gray-200 pt-8">
                    <p class="text-sm text-gray-500">Added on {plnt.CreatedAt.Format("January 2, 2006")}</p>
                </div>
                if usr.HasAuthorRights() {
                <!-- Update Plant -->
                <div class="mt-8 border-t border-gray-200 pt-8">
                    <a href={templ.URL("/view/plant/" + plnt.ID.String() + "/update")} class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-emerald-600 hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500">
                        Update Plant
                    </a>
                </div>
                // <!-- Delete Plant -->
                <div class="mt-8 border-t border-gray-200 pt-8">
                    <button id="delete-plant-button" type="button" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        Delete Plant
                    </button>
                </div>
                
                }
            </div>
        </div>
        <div id="delete-plant-dialog" class="fixed hidden z-50 inset-0 bg-gray-900 bg-opacity-40 overflow-y-auto h-full w-full px-4">
            <div class="relative top-40 mx-auto shadow-xl rounded-md bg-white max-w-md">
                <div class="flex shrink-0 items-center pb-4 text-xl font-medium text-slate-800">
                    Delete Plant?
                </div>
                <div class="relative border-t border-slate-200 py-4 leading-normal text-slate-600 font-light">
                    Do you really want to delete this plant? This action cannot be undone.
                </div>
                <div class="flex shrink-0 flex-wrap items-center pt-4 justify-end">
                    <button id="delete-cancel-button" class="rounded-md border border-transparent py-2 px-4 text-center text-sm transition-all text-slate-600 hover:bg-slate-100 focus:bg-slate-100 active:bg-slate-100 disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none" type="button">
                    Cancel
                </button>
                <button id="delete-confirm-button" class="rounded-md bg-green-600 py-2 px-4 border border-transparent text-center text-sm text-white transition-all shadow-md hover:shadow-lg focus:bg-green-700 focus:shadow-none active:bg-green-700 hover:bg-green-700 active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none ml-2" type="button">
                    Confirm
                </button>
            </div>
        </div>
    </div>
    }
}