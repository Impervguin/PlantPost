services:
  api:
    container_name: api
    build:
      context: ../
      dockerfile: ./api.dockerfile
    ports:
      - "8080:8080"
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 4G
  
  pg:
    container_name: pg
    hostname: pg
    image: postgres:17.4-alpine3.20
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
    env_file:
      - db.env
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U impi -d plantpost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
    networks:
      - pg-net
  
  pg-migrations:
    container_name: pg-migrations
    build:
      context: ../
      dockerfile: ./pg.dockerfile
    command: "migr up"
    networks:
      - pg-net
    volumes:
      - ../migrations/postgres:/migrations
    
    depends_on:
      pg:
        condition: service_healthy
    

volumes:
  pgdata:

networks:
  pg-net:
    driver: bridge
