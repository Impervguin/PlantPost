services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - ../config/traefik.yaml:/etc/traefik/traefik.yml:ro
      - ../config/dynamic.yaml:/etc/traefik/dynamic.yml:ro
    networks:
      - minio-net
      - fs-net
  api:
    container_name: api
    build:
      context: ../
      dockerfile: ./api.dev.dockerfile
    ports:
      - "23450:23450"
      - "23460:23460"
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 4G
    volumes:
      - ../:/build/
      - fsdata:/mediafiles/
    depends_on:
      pg:
        condition: service_healthy 
      pg-migrations:
        condition: service_completed_successfully
      fileserver:
        condition: service_started
      # minio:
      #   condition: service_healthy
      # minio-migrations:
      #   condition: service_completed_successfully
    networks:
      - pg-net
      - minio-net
      - fs-net
    
  
  pg:
    container_name: pg
    hostname: pg
    image: postgres:17.4-alpine3.20
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
    env_file:
      - db.env
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U impi -d plantpost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
    networks:
      - pg-net
  
  pg-migrations:
    container_name: pg-migrations
    build:
      context: ../
      dockerfile: ./pg.dockerfile
    command: "migr up"
    networks:
      - pg-net
    volumes:
      - ../migrations/postgres:/migrations
    
    depends_on:
      pg:
        condition: service_healthy
    
  fileserver:
    container_name: fileserver
    hostname: fileserver
    command: "./fserver --config config/fserver.yaml"
    build:
      context: ../
      dockerfile: ./fserver.dockerfile
    ports:
      - "9000:9000"
    volumes:
      - fsdata:/mediafiles
    networks:
      - fs-net
  # minio:
  #   container_name: minio
  #   hostname: minio
  #   image: minio/minio:RELEASE.2025-04-08T15-41-24Z-cpuv1
  #   command: server --console-address ":9001" --address ":9000" /data
  #   ports:
  #     - "9000:9000"
  #     - "9001:9001"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 10s
  #   volumes:
  #     - miniodata:/data
  #   env_file:
  #     - minio.env
  #   networks:
  #     - minio-net
  
  # minio-migrations:
  #   container_name: minio-migrations
  #   image: minio/mc:RELEASE.2025-04-08T15-39-49Z-cpuv1
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #   env_file:
  #     - minio-migr.env
  #   volumes:
  #     - ../scripts/migrate.sh:/migrations/migrate.sh
  #   networks:
  #     - minio-net
  #   entrypoint: /migrations/migrate.sh

volumes:
  pgdata:
  miniodata:
  fsdata:

networks:
  pg-net:
    driver: bridge
  minio-net:
    driver: bridge
  fs-net:
    driver: bridge
